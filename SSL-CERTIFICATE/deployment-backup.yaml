# ---
# # CRD for TargetGroupBinding
# apiVersion: apiextensions.k8s.io/v1
# kind: CustomResourceDefinition
# metadata:
#   name: targetgroupbindings.elbv2.k8s.aws
# spec:
#   group: elbv2.k8s.aws
#   names:
#     kind: TargetGroupBinding
#     listKind: TargetGroupBindingList
#     plural: targetgroupbindings
#     singular: targetgroupbinding
#   scope: Namespaced
#   versions:
#     - name: v1beta1
#       served: true
#       storage: true
#       schema:
#         openAPIV3Schema:
#           type: object
#           properties:
#             spec:
#               type: object
#               properties:
#                 targetGroupARN:
#                   type: string
#                 serviceRef:
#                   type: object
#                   properties:
#                     name:
#                       type: string
#                     port:
#                       type: integer
#                 targetType:
#                   type: string
#                 ipAddressType:
#                   type: string
#             status:
#               type: object
#               properties:
#                 observedGeneration:
#                   type: integer
#                 conditions:
#                   type: array
#                   items:
#                     type: object
#                     properties:
#                       type:
#                         type: string
#                       status:
#                         type: string
# ---
# # ServiceAccount for ALB Controller
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   namespace: kube-system
#   name: aws-load-balancer-controller
#   annotations:
#     eks.amazonaws.com/role-arn: arn:aws:iam::450665609241:role/aws-load-balancer-controller
# ---
# # ClusterRole
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: aws-load-balancer-controller-role
# rules:
#   - apiGroups: [""]
#     resources:
#       - configmaps
#       - endpoints
#       - events
#       - nodes
#       - pods
#       - secrets
#       - services
#     verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
#   - apiGroups: [""]
#     resources: ["namespaces"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["apps"]
#     resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["networking.k8s.io"]
#     resources: ["ingresses", "ingresses/status"]
#     verbs: ["get", "list", "watch", "update"]
#   - apiGroups: [""]
#     resources: ["services/status"]
#     verbs: ["update"]
# ---
# # ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: aws-load-balancer-controller-rolebinding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: aws-load-balancer-controller-role
# subjects:
#   - kind: ServiceAccount
#     name: aws-load-balancer-controller
#     namespace: kube-system
# ---
# # AWS Load Balancer Controller Deployment
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: aws-load-balancer-controller
#   namespace: kube-system
#   labels:
#     app: aws-load-balancer-controller
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: aws-load-balancer-controller
#   template:
#     metadata:
#       labels:
#         app: aws-load-balancer-controller
#     spec:
#       serviceAccountName: aws-load-balancer-controller
#       containers:
#         - name: aws-load-balancer-controller
#           image: public.ecr.aws/eks/aws-load-balancer-controller:v2.6.2
#           args:
#             - --cluster-name=my-eks-cluster
#             - --ingress-class=alb
#             - --aws-region=us-east-1
#             - --aws-vpc-id=vpc-0e7e054a6567e7a7d
# ---
# # IngressClass for ALB
# apiVersion: networking.k8s.io/v1
# kind: IngressClass
# metadata:
#   name: alb
#   annotations:
#     ingressclass.kubernetes.io/is-default-class: "true"
# spec:
#   controller: "ingress.k8s.aws/alb"
# ---
# # NGINX Deployment
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-deployment
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#         - name: nginx
#           image: nginx:latest
#           ports:
#             - containerPort: 80
#           readinessProbe:
#             httpGet:
#               path: /
#               port: 80
#             initialDelaySeconds: 5
#             periodSeconds: 10
#           livenessProbe:
#             httpGet:
#               path: /
#               port: 80
#             initialDelaySeconds: 10
#             periodSeconds: 15
#           resources:
#             requests:
#               memory: "64Mi"
#               cpu: "250m"
#             limits:
#               memory: "128Mi"
#               cpu: "500m"
# ---
# # NGINX Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-service
# spec:
#   selector:
#     app: nginx
#   ports:
#     - port: 80
#       targetPort: 80
#   type: ClusterIP
# ---
# # NGINX Ingress with ACM SSL (Fixed)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: nginx-ingress
#   annotations:
#     alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:450665609241:certificate/373a6be5-7cf7-459e-ad23-0669c44b1965
#     alb.ingress.kubernetes.io/scheme: internet-facing
#     alb.ingress.kubernetes.io/target-type: ip
#     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
# spec:
#   ingressClassName: alb
#   rules:
#     - host: nginx.africaprocloudinstitute.com
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: nginx-service
#                 port:
#                   number: 80
---
# CRD for TargetGroupBinding
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: targetgroupbindings.elbv2.k8s.aws
spec:
  group: elbv2.k8s.aws
  names:
    kind: TargetGroupBinding
    listKind: TargetGroupBindingList
    plural: targetgroupbindings
    singular: targetgroupbinding
  scope: Namespaced
  versions:
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                targetGroupARN:
                  type: string
                serviceRef:
                  type: object
                  properties:
                    name:
                      type: string
                    port:
                      type: integer
                targetType:
                  type: string
                ipAddressType:
                  type: string
            status:
              type: object
              properties:
                observedGeneration:
                  type: integer
                conditions:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      status:
                        type: string
---
# ServiceAccount for ALB Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: kube-system
  name: aws-load-balancer-controller
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::450665609241:role/aws-load-balancer-controller
---
# ClusterRole with updated permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-load-balancer-controller-role
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - endpoints
      - events
      - nodes
      - pods
      - secrets
      - services
      - namespaces
      - services/status
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "ingresses/status", "ingressclasses"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["elbv2.k8s.aws"]
    resources: ["targetgroupbindings"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-load-balancer-controller-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-load-balancer-controller-role
subjects:
  - kind: ServiceAccount
    name: aws-load-balancer-controller
    namespace: kube-system
---
# AWS Load Balancer Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  labels:
    app: aws-load-balancer-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aws-load-balancer-controller
  template:
    metadata:
      labels:
        app: aws-load-balancer-controller
    spec:
      serviceAccountName: aws-load-balancer-controller
      containers:
        - name: aws-load-balancer-controller
          image: public.ecr.aws/eks/aws-load-balancer-controller:v2.6.2
          args:
            - --cluster-name=my-eks-cluster
            - --ingress-class=alb
            - --aws-region=us-east-1
            - --aws-vpc-id=vpc-0e7e054a6567e7a7d
---
# IngressClass for ALB
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: alb
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: "ingress.k8s.aws/alb"
---
# NGINX Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 15
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
---
# NGINX Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
# NGINX Ingress with ACM SSL
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:450665609241:certificate/373a6be5-7cf7-459e-ad23-0669c44b1965
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
spec:
  ingressClassName: alb
  rules:
    - host: nginx.africaprocloudinstitute.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80


# kubectl logs -n kube-system aws-load-balancer-controller-6959758fcb-rctlq --previous